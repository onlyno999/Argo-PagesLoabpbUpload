name: Auto Update _worker.js

permissions:
  contents: write  # 允许 github-actions[bot] 有权限执行 git push 操作

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      release_type:
        description: '选择更新版本类型'
        required: true
        default: 'release'
        type: choice
        options:
          - 'release'
          - 'prerelease'

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 仓库
        uses: actions/checkout@v4

      - name: 检查并初始化 update_type.txt
        id: init_update_type_file
        run: |
          if [ ! -f "update_type.txt" ]; then
            echo "1" > update_type.txt
            echo "UPDATE_TYPE_FILE_CREATED=true" >> $GITHUB_ENV
            echo "update_type.txt 文件不存在，已自动创建并设置为 '1' (正式版)。"
          else
            echo "update_type.txt 文件已存在。"
          fi

      - name: 获取最新 release 信息
        id: get_release
        run: |
          RELEASE_TYPE_INPUT="${{ github.event.inputs.release_type }}"
          ACTUAL_RELEASE_TYPE=""

          if [ "${{ github.event_name }}" == "schedule" ]; then
            if [ -f "update_type.txt" ]; then
              FILE_CONTENT=$(cat update_type.txt | tr -d '\n' | tr -d '\r')
              if [ "$FILE_CONTENT" == "0" ]; then
                ACTUAL_RELEASE_TYPE="prerelease"
              else
                ACTUAL_RELEASE_TYPE="release"
              fi
            else
              ACTUAL_RELEASE_TYPE="release"
            fi
          else
            ACTUAL_RELEASE_TYPE="$RELEASE_TYPE_INPUT"
          fi

          echo "当前选择的更新类型: $ACTUAL_RELEASE_TYPE"

          if [ "$ACTUAL_RELEASE_TYPE" == "prerelease" ]; then
            latest_tag=$(curl -s https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases \
              | jq -r 'map(select(.prerelease == true and .draft == false)) | sort_by(.published_at) | .[-1].tag_name')
            if [ -z "$latest_tag" ]; then
              echo "未找到任何预发布版本。"
              exit 1
            fi
            echo "最新预发布版本: $latest_tag"
          else
            latest_tag=$(curl -s https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases/latest | jq -r '.tag_name')
            if [ -z "$latest_tag" ]; then
              echo "未找到任何正式发布版本。"
              exit 1
            fi
            echo "最新正式发布版本: $latest_tag"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "release_type=$ACTUAL_RELEASE_TYPE" >> $GITHUB_ENV

      - name: 检查本地 version.txt
        id: check_version
        run: |
          if [ -f "version.txt" ]; then
            current_version=$(cat version.txt | tr -d '\n' | tr -d '\r')
            echo "当前本地版本: $current_version"
          else
            echo "未找到 version.txt，视为首次更新。"
            current_version=""
          fi
          echo "current_version=$current_version" >> $GITHUB_ENV

      - name: 判断是否需要更新
        id: need_update
        run: |
          if [ "$current_version" = "$latest_tag" ]; then
            echo "No update needed."
            echo "need_update=false" >> $GITHUB_ENV
          else
            echo "Update needed."
            echo "need_update=true" >> $GITHUB_ENV
          fi

      - name: 下载并替换 _worker.js
        if: env.need_update == 'true'
        run: |
          download_url="https://github.com/bia-pain-bache/BPB-Worker-Panel/releases/download/${{ env.latest_tag }}/worker.js"
          echo "下载文件: $download_url"
          curl --retry 3 --retry-delay 5 -L -o _worker.js "$download_url"
          if [ ! -s "_worker.js" ]; then
            echo "_worker.js 下载失败或为空。"
            exit 1
          fi
          echo "${{ env.latest_tag }}" > version.txt

      - name: 提交更新到 GitHub
        if: env.need_update == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add _worker.js version.txt
          git status
          git commit -m "Update _worker.js to version ${{ env.latest_tag }}"
          git push

      - name: 提交 update_type.txt (如果自动创建)
        if: env.UPDATE_TYPE_FILE_CREATED == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add update_type.txt
          git commit -m "feat: Auto-created update_type.txt with default 'release' type"
          git push
